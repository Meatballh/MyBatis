<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：该mapper.xml映射文件的唯一标识 -->
<mapper namespace="cn.edu.xit.mapper.StudentMapper">  


	<!-- 声明此namespace开启二级缓存，Mybatis自带的二级缓存-->
	<cache />
	
	<cache type="org.mybatis.caches.ehcache.EhcacheCache">
		<!--通过property覆盖Ehcache.xml中的值  -->
		
	</cache>
	
	
	<!-- SQL片段 -->
	<sql id="objectArrayStunos">
		<where>
			<if test="array != null and array.length">
				<foreach collection="array" open=" and stuno in (" close=")" item="student" separator=",">
					#{student.stuNo}
				</foreach>
			</if>		
		</where>	
	
	</sql>
	
	<!-- 一对多，延迟加载需要：查询班级中的所有学生 -->
	<select id="queryStudentsByClassId" parameterType="int" resultType="student">
		select * from student where classid=#{classId}
	</select>
	
	
	<!-- 后续通过namespace.id -->
	<!-- parameterType：输入参数的类型
		resultType：查询的返回结果值的类型，返回类型  -->
		
		
		
	<!-- 禁用此select的二级缓存       useCache="false"  禁用缓存默认开启  ——————  flushCache="true"开启缓存  -->	
	<select id="queryStudentByStuno"  parameterType="int" resultType="student" useCache="true" >   
	 	select * from student where stuNo = ${value}
	</select>
	
	<insert id="addStrudent" parameterType="student">
		insert into student(stuNo,stuName,stuAge,graName) values(#{stuNo},#{stuName},#{stuAge},#{graName})
	</insert>
 	
	<delete id="deleteStudent" parameterType="int">
		delete from student where stuNo = #{stuNo}
	</delete>
	
	<update id="updateStudent" parameterType="student" >
		update student set stuName=#{stuName},stuAge=#{stuAge},graName=#{graName} where stuNo=#{stuNo}
	</update>
	
	<select id="queryAllStudents" resultType="student">
		select * from student
	</select>
	
	
	<!-- 带转换器的增加 -->
	<insert id="addStrudentWithConverter" parameterType="student">
		insert into student(stuNo,stuName,stuAge,graName,stuSex) values(#{stuNo},#{stuName},#{stuAge},#{graName},#{stuSex ,javaType=boolean,jdbcType=INTEGER})
	</insert>
	
	
	<!-- 查询：使用了类型转换器 
	1.如果 类中属性  和表中的字段 类型能够合理识别  （String-varchar）,则可以使用resultType;否则(boolean-integer) 使用resultMap
	2.如果 类中属性名  和表中的字段名能够合理识别  （stuNo-stuno） 则可以使用resultType;否则(id-stuno) 使用resultMap
	-->
	<select id="queryStudentByStunoWithConverter"  parameterType="int" resultMap="studentResult">   
	 	select * from student where stuNo = #{stuNo}
	</select>
	
	<resultMap type="student" id="studentResult">
		<!-- 分为主键id  和非主键result 
			property:属性
			column:字段		
		-->
		<id property="stuNo" column="stuno"/>
		<result property="stuName" column="stuname"/>
		<result property="stuAge" column="stuage"/>
		<result property="graName" column="graname"/>
		<result property="stuSex" column="stusex" javaType="boolean" jdbcType="INTEGER"/>
	</resultMap>
	
	<!-- 查询学生 当属性名和字段名不同时，可以用别名（ResultMap+HashMap） -->
	<select id="queryStudentByAlias"  parameterType="int" resultType="student">   
	 	select id "stuNo",stuname from student where id=#{id}
	</select>
	
	<!-- =============两种取值符号以及ParameterType为简单、对象、嵌套对象类型================= -->
		
	<select id="queryStudentByStuname"  parameterType="string" resultType="student">   
	 	select stuno,stuname,stuage from student where stuName = '${value}'
	</select>
	
	<select id="queryStudentOrderByColumn" parameterType="string" resultType="student">   
	 	select stuno,stuname,stuage from student order by ${value} desc
	</select>	
	
	<select id="queryStudentOrderBystuAgeOrstuName" parameterType="student" resultType="student">   
	 	select stuno,stuname,stuage from student where stuAge=#{stuAge} or stuname like '%${stuName}%'
	</select>
	
	<!-- 输入参数为HashMap -->
	<select id="queryStudentOrderBystuAgeOrstuNameWithHashMap" parameterType="HashMap" resultType="student">   
	 	select stuno,stuname,stuage from student where stuAge=#{stuAge} or stuname like '%${stuName}%'
	</select>
	
	<!--
	<select id="queryStudentOrderByaddress" parameterType="address" resultType="student">   
	 	select stuno,stuname,stuage from student where homeaddress = #{homeAddress} or schooladdress = '${ schoolAddress}'
	</select>
	-->
	<!-- 输入参数为   级联属性 -->
	<select id="queryStudentOrderByaddress" parameterType="student" resultType="student">   
	 	select stuno,stuname,stuage from student where homeaddress = #{address.homeAddress} or schooladdress = '${address.schoolAddress}'
	</select>
	
	
	<!-- 调用[存储过程]   实现查询 
		存储过程的输入参数，在mybatis用Map来传递（HashMap）
	-->
	<select id="queryConutByGradeWithProcedure" statementType="CALLABLE" parameterType="HashMap"  >
		{CALL queryCountByGradeWithProcedure(#{gname,jdbcType=VARCHAR,mode=IN},#{count,jdbcType=INTEGER,mode=OUT})}
	</select>
	
	<!-- 根据存储过程按学号删除学生 -->
	<delete id="deleteStudentBystunoWithProcedure" statementType="CALLABLE" parameterType="HashMap">
		{CALL deleteStudentBystunoWithProcedure(#{sno,jdbcType=INTEGER,mode=IN})}
	</delete>
	
	
	
	
	<!-- 别名作为Map的key  查询一个学生-->
	<select id="queryStudentOutByHashMap" resultType="HashMap">
		select stuno "no",stuname "name" from student where stuno=1
	</select>
	<!-- 别名作为Map的key  查询多个学生-->
	<select id="queryAllStudentsOutByHashMap" resultType="HashMap">
		select stuno "no",stuname "name" from student 
	</select>
	
	
	
	
	
	<!-- 动态SQL====================
	
	<select id="queryStuByNOrAWishSQLTag" resultType="student" parameterType="student">
		select stuno ,stuname,stuage from student where 1=1
		<if test="stuName !=null and stuName !='' ">
			and stuname = #{stuName}
		
		</if> 
		<if test="stuAge !=null and stuAge !='' ">
			and stuage = #{stuAge}
		
		</if> 
	</select>
	
	 -->
	
	<select id="queryStuByNOrAWishSQLTag" resultType="student" parameterType="student">
		select stuno ,stuname,stuage from student 
		<where>
			<if test="stuName !=null and stuName !='' ">
				and stuname = #{stuName}
			
			</if> 
			<if test="stuAge !=null and stuAge !='' ">
				and stuage = #{stuAge}
			
			</if> 
		</where>
	</select>
	<!-- 将多个对象放入对象的属性中 -->
	<select id="queryStudentsWithNosInGrade" parameterType="grade" resultType="student">
		select * from student
		<where>
			<if test="stuNos != null and stuNos.size>0">
				<foreach collection="stuNos" open=" and stuno in (" close=")" item="stuNo" separator=",">
					#{stuNo}
				</foreach>
			</if>		
		</where>	
	</select>
	
	<!-- 将多个对象放入数组中   int[]   stuNos = {1,2}-->
	<select id="queryStudentsWithArray" parameterType="int[]" resultType="student">
		select * from student
		<where>
			<if test="array != null and array.length">
				<foreach collection="array" open=" and stuno in (" close=")" item="stuNo" separator=",">
					#{stuNo}
				</foreach>
			</if>		
		</where>	
	</select>
	
	<!-- 将多个对象放入数组中   List<Integer> stuNos 值 {1,2}-->
	<select id="queryStudentsWithList" parameterType="list" resultType="student">
		select * from student
		<where>
			<if test="list != null and list.size>0">
				<foreach collection="list" open=" and stuno in (" close=")" item="stuNo" separator=",">
					#{stuNo}
				</foreach>
			</if>		
		</where>	
	</select>
	
	<!-- 将多个对象放入对象数组中    Student[] students = {student0,student1,student2} 每个studentx包含一个学生属性-->
	<select id="queryStudentsWithObjectArray" parameterType="Object[]" resultType="student">
		select * from student
		<include refid="objectArrayStunos"></include>
		<!-- 如果SQL片段和  引用处不在同一个文件中，则需要在refid  引用时加上namespace.id -->
		<!-- <include refid="xxxxx.abcMapper.xxx"></include> -->
	</select>
	
	<!-- ====利用业务扩展类实现一对一关联查询====   -->
	
	<select id="queryStudentByNoWithOO" parameterType="int" resultType="StudentBusiness">   
	 	select s.*,c.* from student s left join studentcard c 
	 	on s.cardid = c.cardid
	 	where s.stuno = #{stuNo}
	</select>
	
	<!-- ====利用resultMap实现一对一关联查询====   -->
	<select id="queryStudentByNoWithOO2" parameterType="int" resultMap="student_cat_map">   
	 	select s.*,c.* from student s left join studentcard c 
	 	on s.cardid = c.cardid
	 	where s.stuno = #{stuNo}
	</select>
	<resultMap type="student" id="student_cat_map">
		<id property="stuNo" column="stuNo"/>
		<result property="stuName" column="stuName"/>
		<result property="stuAge" column="stuAge"/>
		<!-- 一对一时，对象成员使用association   javaType指定该属性的类型-->
		<association property="card" javaType="StudentCard">
			<id property="cardId" column="cardId"/>
			<result property="cardInfo" column="cardInfo"/>
		
		</association>
	</resultMap>
	
	<!-- ====利用resultMap实现一对多关联查询==== -->
	<select id="queryClassAndStudents" resultMap="class_student_map" parameterType="int">
		<!-- 查询g1班的班级信息，和g1班的所有学生信息  -->
		select c.*,s.* from student s inner join studentclass c
		on c.classid = s.classid
		where c.classid=#{classId}
	</select>
	<!-- 类和表的对应关系 -->
	<resultMap type="StudentClass" id="class_student_map">
		<!-- 因为type的祖类是StudentClass,因此先配置班级的信息 -->
		<id property="classId" column="classId"/>
		<result property="className" column="className"/>
		<!-- 配置成员属性学生，一对多;属性类型:javaType,属性的元素类型ofType -->
		<collection property="students" ofType="student">
			<id property="stuNo" column="stuNO"/>
			<result property="stuName" column="stuName"/>
			<result property="stuAge" column="stuAge"/>
		</collection>
	</resultMap>
	
	
	
	<!-- ====利用resultMap实现一对一关联查询,     延迟加载====   -->
	<select id="queryStudentWithOOLazyLoad" parameterType="int" resultMap="student_cat_lazyload_map">   
		<!-- 先查询学生 -->
	 	select * from student
	</select>
	<resultMap type="student" id="student_cat_lazyload_map">
		<id property="stuNo" column="stuNo"/>
		<result property="stuName" column="stuName"/>
		<result property="stuAge" column="stuAge"/>
		<!-- 一对一时，对象成员使用association   javaType指定该属性的类型
			此次采用延迟加载，在查询学生时，并不立即加载学生证信息
		-->
		<!-- 学生证 ,  通过select，在需要的时候再查询学生证-->
		<association property="card" javaType="StudentCard" select="cn.edu.xit.mapper.StudentCardMapper.queryCardById" column="cardid">
		<!--
			 <id property="cardId" column="cardId"/>
			<result property="cardInfo" column="cardInfo"/>
		 -->
		</association>
	</resultMap>
	
	
	

	
	
	
	
</mapper>